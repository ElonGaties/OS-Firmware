// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERMESSAGES_OPENSHOCK_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_SERVERMESSAGES_OPENSHOCK_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace OpenShock {
namespace Serialization {

struct ShockerCommand;

struct ShockerCommandList;
struct ShockerCommandListBuilder;

struct CaptivePortalConfig;

struct ServerMessage;
struct ServerMessageBuilder;

enum ShockerCommandType : uint8_t {
  ShockerCommandType_Stop = 0,
  ShockerCommandType_Shock = 1,
  ShockerCommandType_Vibrate = 2,
  ShockerCommandType_Sound = 3,
  ShockerCommandType_MIN = ShockerCommandType_Stop,
  ShockerCommandType_MAX = ShockerCommandType_Sound
};

inline const ShockerCommandType (&EnumValuesShockerCommandType())[4] {
  static const ShockerCommandType values[] = {
    ShockerCommandType_Stop,
    ShockerCommandType_Shock,
    ShockerCommandType_Vibrate,
    ShockerCommandType_Sound
  };
  return values;
}

inline const char * const *EnumNamesShockerCommandType() {
  static const char * const names[5] = {
    "Stop",
    "Shock",
    "Vibrate",
    "Sound",
    nullptr
  };
  return names;
}

inline const char *EnumNameShockerCommandType(ShockerCommandType e) {
  if (::flatbuffers::IsOutRange(e, ShockerCommandType_Stop, ShockerCommandType_Sound)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesShockerCommandType()[index];
}

enum ServerMessagePayload : uint8_t {
  ServerMessagePayload_NONE = 0,
  ServerMessagePayload_ShockerCommandList = 1,
  ServerMessagePayload_CaptivePortalConfig = 2,
  ServerMessagePayload_MIN = ServerMessagePayload_NONE,
  ServerMessagePayload_MAX = ServerMessagePayload_CaptivePortalConfig
};

inline const ServerMessagePayload (&EnumValuesServerMessagePayload())[3] {
  static const ServerMessagePayload values[] = {
    ServerMessagePayload_NONE,
    ServerMessagePayload_ShockerCommandList,
    ServerMessagePayload_CaptivePortalConfig
  };
  return values;
}

inline const char * const *EnumNamesServerMessagePayload() {
  static const char * const names[4] = {
    "NONE",
    "ShockerCommandList",
    "CaptivePortalConfig",
    nullptr
  };
  return names;
}

inline const char *EnumNameServerMessagePayload(ServerMessagePayload e) {
  if (::flatbuffers::IsOutRange(e, ServerMessagePayload_NONE, ServerMessagePayload_CaptivePortalConfig)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesServerMessagePayload()[index];
}

template<typename T> struct ServerMessagePayloadTraits {
  static const ServerMessagePayload enum_value = ServerMessagePayload_NONE;
};

template<> struct ServerMessagePayloadTraits<OpenShock::Serialization::ShockerCommandList> {
  static const ServerMessagePayload enum_value = ServerMessagePayload_ShockerCommandList;
};

template<> struct ServerMessagePayloadTraits<OpenShock::Serialization::CaptivePortalConfig> {
  static const ServerMessagePayload enum_value = ServerMessagePayload_CaptivePortalConfig;
};

bool VerifyServerMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, ServerMessagePayload type);
bool VerifyServerMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ShockerCommand FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t model_;
  uint8_t id_;
  uint8_t type_;
  uint8_t intensity_;
  uint32_t duration_;

 public:
  ShockerCommand()
      : model_(0),
        id_(0),
        type_(0),
        intensity_(0),
        duration_(0) {
  }
  ShockerCommand(uint8_t _model, uint8_t _id, OpenShock::Serialization::ShockerCommandType _type, uint8_t _intensity, uint32_t _duration)
      : model_(::flatbuffers::EndianScalar(_model)),
        id_(::flatbuffers::EndianScalar(_id)),
        type_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_type))),
        intensity_(::flatbuffers::EndianScalar(_intensity)),
        duration_(::flatbuffers::EndianScalar(_duration)) {
  }
  uint8_t model() const {
    return ::flatbuffers::EndianScalar(model_);
  }
  uint8_t id() const {
    return ::flatbuffers::EndianScalar(id_);
  }
  OpenShock::Serialization::ShockerCommandType type() const {
    return static_cast<OpenShock::Serialization::ShockerCommandType>(::flatbuffers::EndianScalar(type_));
  }
  uint8_t intensity() const {
    return ::flatbuffers::EndianScalar(intensity_);
  }
  uint32_t duration() const {
    return ::flatbuffers::EndianScalar(duration_);
  }
};
FLATBUFFERS_STRUCT_END(ShockerCommand, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) CaptivePortalConfig FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t enabled_;

 public:
  CaptivePortalConfig()
      : enabled_(0) {
  }
  CaptivePortalConfig(bool _enabled)
      : enabled_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_enabled))) {
  }
  bool enabled() const {
    return ::flatbuffers::EndianScalar(enabled_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(CaptivePortalConfig, 1);

struct ShockerCommandList FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ShockerCommandListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMANDS = 4
  };
  const ::flatbuffers::Vector<const OpenShock::Serialization::ShockerCommand *> *commands() const {
    return GetPointer<const ::flatbuffers::Vector<const OpenShock::Serialization::ShockerCommand *> *>(VT_COMMANDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COMMANDS) &&
           verifier.VerifyVector(commands()) &&
           verifier.EndTable();
  }
};

struct ShockerCommandListBuilder {
  typedef ShockerCommandList Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_commands(::flatbuffers::Offset<::flatbuffers::Vector<const OpenShock::Serialization::ShockerCommand *>> commands) {
    fbb_.AddOffset(ShockerCommandList::VT_COMMANDS, commands);
  }
  explicit ShockerCommandListBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ShockerCommandList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ShockerCommandList>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ShockerCommandList> CreateShockerCommandList(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const OpenShock::Serialization::ShockerCommand *>> commands = 0) {
  ShockerCommandListBuilder builder_(_fbb);
  builder_.add_commands(commands);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ShockerCommandList> CreateShockerCommandListDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<OpenShock::Serialization::ShockerCommand> *commands = nullptr) {
  auto commands__ = commands ? _fbb.CreateVectorOfStructs<OpenShock::Serialization::ShockerCommand>(*commands) : 0;
  return OpenShock::Serialization::CreateShockerCommandList(
      _fbb,
      commands__);
}

struct ServerMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  OpenShock::Serialization::ServerMessagePayload payload_type() const {
    return static_cast<OpenShock::Serialization::ServerMessagePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const OpenShock::Serialization::ShockerCommandList *payload_as_ShockerCommandList() const {
    return payload_type() == OpenShock::Serialization::ServerMessagePayload_ShockerCommandList ? static_cast<const OpenShock::Serialization::ShockerCommandList *>(payload()) : nullptr;
  }
  const OpenShock::Serialization::CaptivePortalConfig *payload_as_CaptivePortalConfig() const {
    return payload_type() == OpenShock::Serialization::ServerMessagePayload_CaptivePortalConfig ? static_cast<const OpenShock::Serialization::CaptivePortalConfig *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyServerMessagePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const OpenShock::Serialization::ShockerCommandList *ServerMessage::payload_as<OpenShock::Serialization::ShockerCommandList>() const {
  return payload_as_ShockerCommandList();
}

template<> inline const OpenShock::Serialization::CaptivePortalConfig *ServerMessage::payload_as<OpenShock::Serialization::CaptivePortalConfig>() const {
  return payload_as_CaptivePortalConfig();
}

struct ServerMessageBuilder {
  typedef ServerMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(OpenShock::Serialization::ServerMessagePayload payload_type) {
    fbb_.AddElement<uint8_t>(ServerMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(ServerMessage::VT_PAYLOAD, payload);
  }
  explicit ServerMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerMessage> CreateServerMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    OpenShock::Serialization::ServerMessagePayload payload_type = OpenShock::Serialization::ServerMessagePayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  ServerMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyServerMessagePayload(::flatbuffers::Verifier &verifier, const void *obj, ServerMessagePayload type) {
  switch (type) {
    case ServerMessagePayload_NONE: {
      return true;
    }
    case ServerMessagePayload_ShockerCommandList: {
      auto ptr = reinterpret_cast<const OpenShock::Serialization::ShockerCommandList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ServerMessagePayload_CaptivePortalConfig: {
      return verifier.VerifyField<OpenShock::Serialization::CaptivePortalConfig>(static_cast<const uint8_t *>(obj), 0, 1);
    }
    default: return true;
  }
}

inline bool VerifyServerMessagePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyServerMessagePayload(
        verifier,  values->Get(i), types->GetEnum<ServerMessagePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const OpenShock::Serialization::ServerMessage *GetServerMessage(const void *buf) {
  return ::flatbuffers::GetRoot<OpenShock::Serialization::ServerMessage>(buf);
}

inline const OpenShock::Serialization::ServerMessage *GetSizePrefixedServerMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OpenShock::Serialization::ServerMessage>(buf);
}

inline bool VerifyServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OpenShock::Serialization::ServerMessage>(nullptr);
}

inline bool VerifySizePrefixedServerMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OpenShock::Serialization::ServerMessage>(nullptr);
}

inline void FinishServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::ServerMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedServerMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpenShock::Serialization::ServerMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Serialization
}  // namespace OpenShock

#endif  // FLATBUFFERS_GENERATED_SERVERMESSAGES_OPENSHOCK_SERIALIZATION_H_
