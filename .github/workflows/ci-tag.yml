on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'

name: ci-tag
run-name: "ci-tag: ${{ github.ref_name }}"

env:
  NODE_VERSION: 16
  PYTHON_VERSION: 3.12
  OPENSHOCK_API_DOMAIN: api.shocklink.net
  # OPENSHOCK_FW_VERSION:
  #   - If this is a tag push, we can use ref_name to get the tag name.
  #   - If this is branch "master" or "develop", we use "0.0.0-master" or "0.0.0-develop" respectively.
  #   - All other scenarios we use "0.0.0-unknown", as we cannot guarantee SemVer compliance by accepting any branch name. So this is the safe option.
  OPENSHOCK_FW_VERSION: ${{ (startsWith(github.ref, 'refs/tags/') && github.ref_name) || (contains(fromJSON('["master","develop"]'), github.ref_name) && format('0.0.0-{0}', github.ref_name)) || '0.0.0-unknown' }}
  OPENSHOCK_FW_COMMIT: ${{ github.sha }}

jobs:

  # Read platformio.ini and extract all specific targets. See the referenced file for more info.
  get-targets:
    uses: ./.github/workflows/get-targets.yml

  build-captive-portal:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            WebUI

      - uses: ./.github/actions/build-captive-portal
        with:
          node-version: ${{ env.NODE_VERSION }}
          skip-checkout: true

  build-filesystem:
    runs-on: ubuntu-latest
    needs: build-captive-portal

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-filesystem
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          skip-checkout: true

  build-firmware:
    runs-on: ubuntu-latest
    needs: get-targets
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get-targets.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/build-firmware
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          board: ${{ matrix.board }}
          skip-checkout: true

  merge-images:
    runs-on: ubuntu-latest
    needs: [get-targets, build-filesystem, build-firmware]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get-targets.outputs.matrix )}}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            scripts
            boards
            chips

      - name: Debug
        run: |
          ls -la
          find .

      - name: Merge images
        uses: ./.github/actions/merge-images
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          board: ${{ matrix.board }}
          skip-checkout: true

      - name: Upload artifact to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: OpenShock_*.bin
          file_glob: true
          tag: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [merge-images]

    steps:
      - name: Download release notes
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            RELEASE.md

      # This step reads a file from repo and use it for body of the release
      # This works on any self-hosted runner OS
      - name: Read RELEASE.md
        id: read_release
        shell: bash
        run: |
          r=$(cat RELEASE.md)                               # <--- Read release.md (Provide correct path as per your repo)
          r="${r//'%'/'%25'}"                               # Multiline escape sequences for %
          r="${r//$'\n'/'%0A'}"                             # Multiline escape sequences for '\n'
          r="${r//$'\r'/'%0D'}"                             # Multiline escape sequences for '\r'
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT          # <--- Set environment variable

      - name: Upload release notes
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: RELEASE.md
          asset_name: RELEASE.md
          tag: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}
