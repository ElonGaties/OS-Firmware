on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
        description: 'Firmware version to publish'
      release-channel:
        type: string
        required: true
        description: 'Release channel to publish to'
      is-prerelease:
        type: boolean
        required: true
        description: 'Whether this is a prerelease'
      board-list:
        type: string
        required: true
        description: 'JSON list of boards to publish'
      board-matrix:
        type: string
        required: true
        description: 'JSON matrix of boards to publish'
      release-notes:
        type: string
        required: true
        description: 'Release notes for this release'
      release-stable-list:
        type: string
        required: true
        description: Newline-separated list of all stable releases
      release-beta-list:
        type: string
        required: true
        description: Newline-separated list of all beta releases
      release-dev-list:
        type: string
        required: true
        description: Newline-separated list of all dev releases
    secrets:
      S3_SECRET_ACCESS_KEY:
        required: true

name: Publish release

jobs:
  cdn-upload-firmware:
    runs-on: ubuntu-latest
    environment: cdn-firmware-r2
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(inputs.board-matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github

      # Set up rclone for CDN uploads.
      - uses: ./.github/actions/cdn-prepare
        with:
          cf-account-id: ${{ vars.S3_ACCOUNT_ID }}
          cf-access-key-id: ${{ vars.S3_ACCESS_KEY_ID }}
          cf-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-upload-firmware
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          release-channel: ${{ inputs.release-channel }}
          board: ${{ matrix.board }}

  cdn-upload-version-info:
    runs-on: ubuntu-latest
    environment: cdn-firmware-r2

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github

      # Set up rclone for CDN uploads.
      - uses: ./.github/actions/cdn-prepare
        with:
          cf-account-id: ${{ vars.S3_ACCOUNT_ID }}
          cf-access-key-id: ${{ vars.S3_ACCESS_KEY_ID }}
          cf-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-upload-version-info
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          release-channel: ${{ inputs.release-channel }}
          boards: ${{ inputs.board-list }}

  cdn-bump-version:
    runs-on: ubuntu-latest
    needs: [cdn-upload-firmware] # only after version is complete
    environment: cdn-firmware-r2

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github

      # Set up rclone for CDN uploads.
      - uses: ./.github/actions/cdn-prepare
        with:
          cf-account-id: ${{ vars.S3_ACCOUNT_ID }}
          cf-access-key-id: ${{ vars.S3_ACCESS_KEY_ID }}
          cf-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-bump-version
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          version-list: ${{ inputs.release-stable-list }}
          release-channel: stable

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-bump-version
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          version-list: ${{ inputs.release-beta-list }}
          release-channel: beta

      # Upload firmware to CDN.
      - uses: ./.github/actions/cdn-bump-version
        with:
          cf-bucket: ${{ vars.S3_BUCKET }}
          version-list: ${{ inputs.release-dev-list }}
          release-channel: dev

  checkpoint-cdn:
    runs-on: ubuntu-latest
    needs: [cdn-upload-firmware, cdn-upload-version-info, cdn-bump-version]
    steps:
      - run: echo "CDN checkpoint reached"

  release:
    if: (inputs.release-channel == 'stable' || inputs.release-channel == 'beta')
    runs-on: ubuntu-latest
    needs: [checkpoint-cdn]

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: '**/OpenShock_*.bin'
          tag: ${{ inputs.version }}
          prerelease: ${{ inputs.is-prerelease }}
          artifactErrorsFailBuild: true
          body: ${{ inputs.release-notes }}
