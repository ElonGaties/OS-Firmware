// automatically generated by the FlatBuffers compiler, do not modify

import { GatewayPairCommand } from '../../../open-shock/serialization/local/gateway-pair-command.js';
import { GatewayUnpairCommand } from '../../../open-shock/serialization/local/gateway-unpair-command.js';
import { SetRfTxPinCommand } from '../../../open-shock/serialization/local/set-rf-tx-pin-command.js';
import { WifiNetworkConnectCommand } from '../../../open-shock/serialization/local/wifi-network-connect-command.js';
import { WifiNetworkDisconnectCommand } from '../../../open-shock/serialization/local/wifi-network-disconnect-command.js';
import { WifiNetworkForgetCommand } from '../../../open-shock/serialization/local/wifi-network-forget-command.js';
import { WifiNetworkSaveCommand } from '../../../open-shock/serialization/local/wifi-network-save-command.js';
import { WifiScanCommand } from '../../../open-shock/serialization/local/wifi-scan-command.js';


export enum LocalToDeviceMessagePayload {
  NONE = 0,
  WifiScanCommand = 1,
  WifiNetworkSaveCommand = 2,
  WifiNetworkForgetCommand = 3,
  WifiNetworkConnectCommand = 4,
  WifiNetworkDisconnectCommand = 5,
  GatewayPairCommand = 6,
  GatewayUnpairCommand = 7,
  SetRfTxPinCommand = 8
}

export function unionToLocalToDeviceMessagePayload(
  type: LocalToDeviceMessagePayload,
  accessor: (obj:GatewayPairCommand|GatewayUnpairCommand|SetRfTxPinCommand|WifiNetworkConnectCommand|WifiNetworkDisconnectCommand|WifiNetworkForgetCommand|WifiNetworkSaveCommand|WifiScanCommand) => GatewayPairCommand|GatewayUnpairCommand|SetRfTxPinCommand|WifiNetworkConnectCommand|WifiNetworkDisconnectCommand|WifiNetworkForgetCommand|WifiNetworkSaveCommand|WifiScanCommand|null
): GatewayPairCommand|GatewayUnpairCommand|SetRfTxPinCommand|WifiNetworkConnectCommand|WifiNetworkDisconnectCommand|WifiNetworkForgetCommand|WifiNetworkSaveCommand|WifiScanCommand|null {
  switch(LocalToDeviceMessagePayload[type]) {
    case 'NONE': return null; 
    case 'WifiScanCommand': return accessor(new WifiScanCommand())! as WifiScanCommand;
    case 'WifiNetworkSaveCommand': return accessor(new WifiNetworkSaveCommand())! as WifiNetworkSaveCommand;
    case 'WifiNetworkForgetCommand': return accessor(new WifiNetworkForgetCommand())! as WifiNetworkForgetCommand;
    case 'WifiNetworkConnectCommand': return accessor(new WifiNetworkConnectCommand())! as WifiNetworkConnectCommand;
    case 'WifiNetworkDisconnectCommand': return accessor(new WifiNetworkDisconnectCommand())! as WifiNetworkDisconnectCommand;
    case 'GatewayPairCommand': return accessor(new GatewayPairCommand())! as GatewayPairCommand;
    case 'GatewayUnpairCommand': return accessor(new GatewayUnpairCommand())! as GatewayUnpairCommand;
    case 'SetRfTxPinCommand': return accessor(new SetRfTxPinCommand())! as SetRfTxPinCommand;
    default: return null;
  }
}

export function unionListToLocalToDeviceMessagePayload(
  type: LocalToDeviceMessagePayload, 
  accessor: (index: number, obj:GatewayPairCommand|GatewayUnpairCommand|SetRfTxPinCommand|WifiNetworkConnectCommand|WifiNetworkDisconnectCommand|WifiNetworkForgetCommand|WifiNetworkSaveCommand|WifiScanCommand) => GatewayPairCommand|GatewayUnpairCommand|SetRfTxPinCommand|WifiNetworkConnectCommand|WifiNetworkDisconnectCommand|WifiNetworkForgetCommand|WifiNetworkSaveCommand|WifiScanCommand|null, 
  index: number
): GatewayPairCommand|GatewayUnpairCommand|SetRfTxPinCommand|WifiNetworkConnectCommand|WifiNetworkDisconnectCommand|WifiNetworkForgetCommand|WifiNetworkSaveCommand|WifiScanCommand|null {
  switch(LocalToDeviceMessagePayload[type]) {
    case 'NONE': return null; 
    case 'WifiScanCommand': return accessor(index, new WifiScanCommand())! as WifiScanCommand;
    case 'WifiNetworkSaveCommand': return accessor(index, new WifiNetworkSaveCommand())! as WifiNetworkSaveCommand;
    case 'WifiNetworkForgetCommand': return accessor(index, new WifiNetworkForgetCommand())! as WifiNetworkForgetCommand;
    case 'WifiNetworkConnectCommand': return accessor(index, new WifiNetworkConnectCommand())! as WifiNetworkConnectCommand;
    case 'WifiNetworkDisconnectCommand': return accessor(index, new WifiNetworkDisconnectCommand())! as WifiNetworkDisconnectCommand;
    case 'GatewayPairCommand': return accessor(index, new GatewayPairCommand())! as GatewayPairCommand;
    case 'GatewayUnpairCommand': return accessor(index, new GatewayUnpairCommand())! as GatewayUnpairCommand;
    case 'SetRfTxPinCommand': return accessor(index, new SetRfTxPinCommand())! as SetRfTxPinCommand;
    default: return null;
  }
}
